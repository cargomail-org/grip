participant "IdP/STS" as STS
participant "Propagation Proxy (RS + Client)" as PP
participant "RS" as RP

bottomparticipants

note over STS:IdP/STS\n• supports RFC 8705\n• supports the Token Exchange extension of OAuth 2.0
note over PP:Propagation Proxy:\n• supports RFC 8705\n• is registered at the IdP/STS as a confidential client\n• acts as a client in respect of the RS\n• the hash of the public key described in RFC 8705 is published using .well-known or DNS (DANE) mechanism\n  to authenticate to the RS using the service specific client identity represented by a DNS domain name
note over RP:RS:\n• supports RFC 8705\n• uses the information in the assertion to identify the subscriber\n  and makes authorization decisions using a local ABAC engine\n• should support the service discovery mechanism
STS<-PP:1. Send an HTTP request to the IdP/STS endpoint\n    • grant_type = urn:ietf:params:oauth:grant-type:token-exchange\n    • resource = a target RS URI\n    • requested_token_type = urn:ietf:params:oauth:token-type:jwt\n    • subject_token = access_token\n    • subject_token_type = urn:ietf:params:oauth:token-type:access_token
STS->STS:2. Authorization decision:\n   1. evaluate the resource parameter\n   2. verify the subject_token signature\n   3. evaluate the subject_token claims

STS->STS:3. IdP/STS generates a token — a signed certificate-bound assertion\n    in JWT format with these claims:\n    {iss, aud, sub, exp, nbf, cnf, act{sub}}\n    • iss is the URI that identifies who issues the token\n    • aud identifies the target service and it is the value from\n      the resource parameter\n    • sub identifies the subscriber by the email address\n      retrieved through subject_token introspection\n    • exp, nbf are the standard JWT claims\n    • cnf is the confirmation method with the hash of the client certificate\n      to which the token is bound\n    • act{sub} is a Base64 encoded hash of the subject (DN) of the client's public certificate
PP<-STS:4. Return the token\n{"access_token":token,\n "issued_token_type":"urn:ietf:params:oauth:token-type:jwt",\n "token_type":"N_A",\n "expires_in":3600}

PP->RP:5. Send an HTTP request to the RS with the token using mTLS
RP->RP:6. Authorization decision\n    1. verify the token signature\n    2. validate proof-of-possession\n    3. validate the act{sub} claim\n    4. use WebFinger to locate the IdP for the subscriber using its identifier\n       and verify that the IdP matches the token issuer
RP->PP:7. Return the HTTP response, typically with 200, 201 status code
