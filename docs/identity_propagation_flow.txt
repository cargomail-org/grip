participant "IdP" as IdP
participant "Identity Propagator (RP + Client)" as Propagator
participant "RP (RS)" as RP

bottomparticipants

note over IdP:IdP\n• supports RFC 8705\n• supports the STS Token Exchange extension of OAuth 2.0
note over Propagator:Identity Propagator:\n• supports RFC 8705\n• acts as a relying party in respect of the IdP in order to obtain an access_token_with_user_claims\n• is registered at the IdP as a confidential client or uses RFC 8705 to authenticate at the IdP\n• acts as a client in respect of the RP\n• the hash of the public key described in RFC 8705 is published using .well-known, Webfinger or DNS (DANE) mechanism\n  to authenticate to the RP using the service specific client identity represented by a DNS domain name
note over RP:RP:\n• supports RFC 8705\n• uses the information in the assertion to identify the subscriber\n  and makes authorization decisions using a local ABAC engine\n• should support the service discovery mechanism
IdP<-Propagator:1. Send an HTTP request to the STS endpoint\n    • grant_type = token-exchange\n    • resource = a target RP URI\n    • requested_token_type = urn:ietf:params:oauth:token-type:jwt\n    • subject_token = access_token_with_user_claims\n    • subject_token_type = urn:ietf:params:oauth:token-type:access_token
IdP->IdP:2. Authorization decision:\n   1. evaluate the resource parameter\n   2. verify the subject_token signature\n   3. evaluate the subject_token claims

IdP->IdP:3. STS generates a certificate-bound jwt access_token with these claims:\n    {iss, aud, sub, exp, nbf}\n    • iss is the URI that identifies who issues the access_token\n    • aud identifies the target service and it is the value from\n      the resource parameter\n    • sub identifies the subscriber by an email address that is extracted from\n      the access_token_with_user_claims\n    • exp, nbf are the standard JWT claims
Propagator<-IdP:4. Return the access_token

Propagator->RP:5. Send an HTTP request to the RP with the access_token using mTLS
RP->RP:6. Authorization decision\n    1. verify the access_token signature\n    2. validate proof-of-possession\n    3. validate the client service specific identity\n    4. evaluate claims
RP->Propagator:7. Return the HTTP response, typically with 200, 201 status code
