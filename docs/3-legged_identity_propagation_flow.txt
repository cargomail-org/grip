participant "IdP/AS" as AS
participant "RP/Client" as Client
participant "RS" as RP

bottomparticipants

note over AS:IdP/AS\n• AS acts in the role of a Security Token Service (STS)\n• supports Mutual-TLS Client Certificate-Bound Access Tokens\n• supports the Token Exchange extension of OAuth 2.0
note over Client:RP/Client:\n• supports Mutual-TLS Client Certificate-Bound Access Tokens,\n  the CN attribute of the public client certificate is used as a global client identifier\n  in respect of the service it represents, e.g., CN=_smtp-client.foo.127.0.0.1.nip.io\n• is registered at the IdP/AS as a confidential client\n• acts as a client in respect of the RS
note over RP:RS:\n• supports Mutual-TLS Client Certificate-Bound Access Tokens\n• uses the information in the assertion to identify the user\n  and makes authorization decisions using a local ABAC engine\n• should support the IdP/AS issuer discovery mechanism
AS<-Client:1. Send an HTTP request to the IdP/AS STS endpoint\n    • grant_type = urn:ietf:params:oauth:grant-type:token-exchange\n    • resource = a target RS URI\n    • requested_token_type = urn:ietf:params:oauth:token-type:jwt\n    • subject_token = access_token\n    • subject_token_type = urn:ietf:params:oauth:token-type:access_token
AS->AS:2. Authorization decision:\n   1. evaluate the resource parameter\n   2. verify the subject_token signature\n   3. evaluate the subject_token claims

AS->AS:3. IdP/AS STS generates a token — a signed certificate-bound assertion\n    in JWT format with these claims:\n    {iss, aud, sub, exp, nbf, cnf, act{sub}}\n    • iss is the URI that identifies who issues the token\n    • aud identifies the target service and it is the value from\n      the resource parameter\n    • sub identifies the user by the email address\n      retrieved through subject_token introspection\n    • exp, nbf are the standard JWT claims\n    • cnf is the confirmation method with the hash of the client certificate\n      to which the token is bound\n    • act{sub} is the global client identifier in respect of the service\n      it represents, copied from the CN attribute of the client's\n      public certificate, e.g., _smtp-client.foo.127.0.0.1.nip.io\n      (act identifies the acting party to whom authority has been delegated)
Client<-AS:4. Return the token\n{"access_token":token,\n "issued_token_type":"urn:ietf:params:oauth:token-type:jwt",\n "token_type":"N_A",\n "expires_in":3600}

Client->RP:5. Send an HTTP request to the RS with the token using mTLS
RP->RP:6. Authorization decision\n    1. verify the token signature\n    2. validate proof-of-possession\n    3. use WebFinger to locate the IdP for the user using\n        its identifier and verify that the IdP matches the token issuer\n    or\n        the domain part of the users's email address\n        and the IdP/AS host domain must match
RP->Client:7. Return the HTTP response, typically with 200, 201 status code
