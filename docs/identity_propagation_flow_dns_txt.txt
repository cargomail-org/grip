participant "IdP/STS" as STS
participant "RP/Client" as Client
participant "RS" as RP

bottomparticipants

note over STS:IdP/STS\n• supports Mutual-TLS Client Certificate-Bound Access Tokens\n• supports the Token Exchange extension of OAuth 2.0
note over Client:RP/Client:\n• supports Mutual-TLS Client Certificate-Bound Access Tokens,\n  the subject of the public client certificate (OU and CN attributes) is used as a global client identifier,\n  e.g., OU=_fhir-client, CN=sandbox.example.com\n• is registered at the IdP/STS as a confidential client\n• acts as a client in respect of the RS\n• the client's public key hash is published on the client domain (usually identical to the IdP host domain) using DNS TXT record,\n  e.g., _fhir-client.sandbox.example.com. IN TXT  "v=DANCE1; h=sha256; p=d2abde240d7cd3ee6b4b28c54df034b97983a1 ... e971"
note over RP:RS:\n• supports Mutual-TLS Client Certificate-Bound Access Tokens\n• uses the information in the assertion to identify the user\n  and makes authorization decisions using a local ABAC engine\n• should support the service discovery mechanism
STS<-Client:1. Send an HTTP request to the IdP/STS endpoint\n    • grant_type = urn:ietf:params:oauth:grant-type:token-exchange\n    • resource = a target RS URI\n    • requested_token_type = urn:ietf:params:oauth:token-type:jwt\n    • subject_token = access_token\n    • subject_token_type = urn:ietf:params:oauth:token-type:access_token
STS->STS:2. Authorization decision:\n   1. evaluate the resource parameter\n   2. verify the subject_token signature\n   3. evaluate the subject_token claims

STS->STS:3. IdP/STS generates a token — a signed certificate-bound assertion\n    in JWT format with these claims:\n    {iss, aud, sub, exp, nbf, cnf, act{sub}}\n    • iss is the URI that identifies who issues the token\n    • aud identifies the target service and it is the value from\n      the resource parameter\n    • sub identifies the user by the email address\n      retrieved through subject_token introspection\n    • exp, nbf are the standard JWT claims\n    • cnf is the confirmation method with the hash of the client certificate\n      to which the token is bound\n    • act{sub} is the global client identifier derived from the subject of the client's\n      public certificate in the OU.CN format, e.g., _fhir-client.sandbox.example.com
Client<-STS:4. Return the token\n{"access_token":token,\n "issued_token_type":"urn:ietf:params:oauth:token-type:jwt",\n "token_type":"N_A",\n "expires_in":3600}

Client->RP:5. Send an HTTP request to the RS with the token using mTLS
RP->RP:6. Authorization decision\n    1. verify the token signature\n    2. validate proof-of-possession\n    3. verify the act{sub} claim, the client is authenticated via the DNS\n       using the TXT record\n    4. use WebFinger to locate the IdP for the user using\n       its identifier and verify that the IdP matches the token issuer
RP->Client:7. Return the HTTP response, typically with 200, 201 status code
