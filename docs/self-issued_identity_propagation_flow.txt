participant "Client" as Client
participant "RS" as RS

bottomparticipants

entryspacing 1.0
note over Client:Client:\n• supports mTLS authentication with X.509 certificates\n• uses a self-signed or CA-signed certificate with a certificate extension containing a custom OID and ASN1:UTF8String value\n  that serves as a global client identifier in respect of the service it represents,\n  e.g., 1.2.3.4.5.6.7.8=ASN1:UTF8String:client._mhs._grip.foo.com\n• acts as a client in respect of the RS\n• the Client's public key fingerprint is published on the client domain using DNS TXT record,\n  e.g., client._mhs._grip.foo.com IN TXT  "v=grip1; h=sha256; p=d2abde240d7cd3ee6b ... e971"
note over RS:RS:\n• supports mTLS authentication with X.509 certificates\n• uses a CA-signed certificate with an appropriate Subject Alternative Name (SAN)\n• uses a DNS SRV record to specify a host and port of the resource server, while identifies the respective\n   service, e.g., _mhs._tcp.bar.com\n• uses the information in the assertion to identify the user\n  and makes authorization decisions using a local ABAC engine
Client->Client:1. Client generates a token — a signed, using the Client's private key,\n    DNS-bound assertion in JWT format with these claims:\n    {iss, aud, sub, exp, nbf, jwk, act{sub}, tokens}\n    • iss identifies who issues the token — CN from public Client's certificate,\n      e.g., foo.com\n    • aud identifies the target service by the DNS SRV record, e.g., _mhs._tcp.bar.com\n    • sub identifies the user by email address,\n      e.g. User Principal Name (UPN) from Active Directory (AD)\n      (Client impersonates the user by using their email address)\n    • exp, nbf are the standard JWT claims\n    • jwks holds a Client's certificate public key in the JWK Set format\n      (alternatively provide JWK Set by URI using jwks_uri claim)\n    • tokens (optional) holds an embedded JWT from the previous hop\n    • digest (optional) contains a digest (cryptographic hash) of the data being transmitted


Client->RS:2. Send an HTTPS request to the RS with the token using mTLS
RS->RS:3. Authorization decision\n    1. the client is authenticated via the DNS using the TXT record and the custom OID value\n       from the public Client's certificate\n    2. verify the token signature\n    3. validate proof-of-possession\n    4. verify the aud claim\n    5. (optional) evaluate embedded tokens\n    6. the domain part of the user's email address and the domain part of the custom OID value\n       from the public Client's certificate must match\n    7. (optional) verify the digest claim value against digest of transmitted data
RS->Client:4. Return the HTTP response, typically with 200, 201 status code
