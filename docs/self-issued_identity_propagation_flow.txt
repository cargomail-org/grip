participant "client\n(foo.com)" as Client
participant "server\n(bar.com)" as Server

bottomparticipants

fontfamily arial

entryspacing 1.0
note over Client:client:\n• supports mTLS authentication with X.509 certificates\n• uses a self-signed certificate with a certificate extension containing\n   a custom OID and ASN1:UTF8String value that serves as a global\n   client identifier in respect of the service it represents,\n   e.g., 1.2.3.4.5.6.7.8=ASN1:UTF8String:client._mhs._grip.foo.com\n• the client's public key fingerprint is published on the client domain\n   using DNS TXT record, e.g., client._mhs._grip.foo.com\n   IN TXT "v=grip1; h=sha256; f=d2abde240d7cd3ee6b ... e971"
note over Server:server:\n• supports mTLS authentication with X.509 certificates\n• uses a CA-signed certificate with an appropriate Subject Alternative Name (SAN)\n• uses a DNS SRV record to specify a host and port of the server, while identifies the respective service,\n   e.g., _mhs._tcp.bar.com IN SRV 100 1 2525 mhs-server.bar.com\n• uses the information in the assertion to identify the principal (user)
Client->Client:1. The client generates a security token — a signed (using the client's private key) DNS-bound\n      assertion in JWT format with these claims: {token, iat, iss, aud, sub, client, jwks}\n    • token: a tokenized digital resource (message, blob, security token from the previous hop, ...)\n    • iat: the issued-at timestamp of the security token\n    • iss: identifies who issues the security token — CN from public client's certificate, e.g., foo.com\n    • aud: identifies the target service by the DNS SRV record, e.g., _mhs._tcp.bar.com\n    • sub: identifies the principal by email address, e.g., alice.baz.com\n    • client: identifier of the authorized client A (e.g., client._mhs._grip.baz.com) that authorizes\n       client B (e.g, client._mhs._grip.foo.com) to act on behalf of the principal (e.g., alice.baz.com)\n    • jwks: holds the public key of the client certificate in the JWK Set format (alternatively provide\n       JWK Set by URI using jwks_uri claim)\n
Client->Server:2. Send an HTTPS request to the server with the security token using mTLS
Server->Server:3. authorization decision\n    • the client is authenticated via the DNS using the TXT record\n       and the custom OID value from the public client's certificate\n    • verify the security token signature\n    • validate proof-of-possession\n    • verify the 'aud' claim\n    • validate the 'client' claim; the domain part of the principal\n       email address and the domain part of the 'client' claim value\n       must match\n    • validate the tokenized digital resource
Server->Client:4. Return the HTTP response, typically with 200, 201 status code
