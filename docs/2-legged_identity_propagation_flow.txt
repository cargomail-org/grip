participant "AS" as AS
participant "Client" as Client
participant "RS" as RS

bottomparticipants

entryspacing 1.0
note over AS:AS\n• acts in the role of a Security Token Service (STS)\n• supports the Token Exchange extension of OAuth 2.0\n• supports Mutual-TLS Client Certificate-Bound Access Tokens extension of OAuth 2.0
note over Client:Client:\n• uses self-signed or CA-signed certificate,\n  the CN attribute of the public client certificate is used as a global client identifier\n  in respect of the service it represents, e.g., CN=_smtp-client.foo.127.0.0.1.nip.io\n• supports Mutual-TLS Client Certificate-Bound Access Tokens extension of OAuth 2.0\n• is registered at the AS as a confidential client\n• acts as a client in respect of the RS
note over RS:RS:\n• supports Mutual-TLS Client Certificate-Bound Access Tokens extension of OAuth 2.0\n• uses the information in the assertion to identify the user\n  and makes authorization decisions using a local ABAC engine\n• should support the AS issuer discovery mechanism
Client->Client:1. Client generates a token — a signed, using the Client's private key,\n    certificate-bound assertion in JWT format with these claims:\n    {iss, aud, sub, exp, nbf, cnf, act{sub}}\n    • iss identifies who issues the token — CN from public Client's certificate,\n      e.g. _smtp-client.foo.127.0.0.1.nip.io\n    • aud identifies the target AS\n    • sub identifies the user by email address,\n      e.g. User Principal Name (UPN) from Active Directory (AD)\n      (Client impersonates the user by using their email address)\n    • exp, nbf are the standard JWT claims\n    • cnf is the confirmation method with the hash of the client certificate\n      to which the token is bound
AS<-Client:2. Send an HTTP request to the AS STS token endpoint using mTLS\n    • grant_type = urn:ietf:params:oauth:grant-type:token-exchange\n    • resource = a target RS URI\n    • requested_token_type = urn:ietf:params:oauth:token-type:jwt\n    • subject_token = token\n    • subject_token_type = urn:ietf:params:oauth:token-type:jwt
AS->AS:3. Authorization decision:\n    1. authenticate the client using the specified credentials\n    2. evaluate the resource parameter\n    3. verify the subject_token signature using the Client's certificate public key\n    4. validate the subject_token proof-of-possession\n    5. evaluate the subject_token claims

AS->AS:4. AS STS generates a token — a signed certificate-bound assertion\n    in JWT format with these claims:\n    {iss, aud, sub, exp, nbf, cnf, act{sub}}\n    • iss is the URI that identifies who issues the token\n    • aud identifies the target service and it is the value from\n      the resource parameter\n    • sub identifies the user by email address\n      retrieved through subject_token introspection\n    • exp, nbf are the standard JWT claims\n    • cnf is the confirmation method with the hash of the client certificate\n      to which the token is bound\n    • act{sub} is the global client identifier in respect of the service\n      it represents, copied from the CN attribute of the client's\n      public certificate, e.g., _smtp-client.foo.127.0.0.1.nip.io\n      (act identifies the acting party to whom authority has been delegated)
Client<-AS:5. Return the token\n{"access_token":token,\n "issued_token_type":"urn:ietf:params:oauth:token-type:jwt",\n "token_type":"N_A",\n "expires_in":3600}

Client->RS:6. Send an HTTP request to the RS with the token using mTLS
RS->RS:7. Authorization decision\n    1. verify the token signature\n    2. validate proof-of-possession\n    3. use WebFinger to locate the AS for the user using\n        its identifier and verify that the AS matches the token issuer\n    or\n        the domain part of the users's email address\n        and the AS host domain must match
RS->Client:8. Return the HTTP response, typically with 200, 201 status code
