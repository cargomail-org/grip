participant "AS" as AS
participant "Client" as Client
participant "RS" as RS

bottomparticipants

entryspacing 1.0
note over AS:AS\n• acts in the role of a Security Token Service (STS)\n• supports the Token Exchange extension of OAuth 2.0\n• supports mTLS Client Certificate-Bound Access Tokens extension of OAuth 2.0
note over Client:RP/Client:\n• is registered at the AS as a confidential client\n• supports mTLS Client Certificate-Bound Access Tokens extension of OAuth 2.0\n• uses a self-signed or CA-signed certificate with a certificate extension containing a custom OID and ASN1:UTF8String value\n  that serves as a global client identifier in respect of the service it represents,\n  e.g., 1.2.3.4.5.6.7.8=ASN1:UTF8String:client._mhs._grip.foo.com\n• acts as a client in respect of the RS\n• the Client's public key hash is published on the client domain using DNS TXT record,\n  e.g., client._mhs._grip.foo.com IN TXT  "v=grip1; h=sha256; p=d2abde240d7cd3ee6b ... e971"
note over RS:RS:\n• supports mTLS Client Certificate-Bound Access Tokens extension of OAuth 2.0\n• uses the information in the assertion to identify the user\n  and makes authorization decisions using a local ABAC engine\n• should support the AS issuer discovery mechanism
Client->Client:1. Client generates a token — a signed, using the Client's private key,\n    certificate-bound assertion in JWT format with these claims:\n    {iss, aud, sub, exp, nbf, cnf, act{sub}, tokens}\n    • iss identifies who issues the token — CN from public Client's certificate,\n      e.g., foo.com\n    • aud identifies the target AS\n    • sub identifies the user by email address,\n      e.g. User Principal Name (UPN) from Active Directory (AD)\n      (Client impersonates the user by using their email address)\n    • exp, nbf are the standard JWT claims\n    • cnf is the confirmation method with the hash of the client certificate\n      to which the token is bound\n    • tokens (optional) holds an embedded JWT from the previous hop\n    • fingerprint (optional) contains a fingerprint of the data being transmitted
AS<-Client:2. Send an HTTP request to the AS STS token endpoint using mTLS\n    • grant_type = urn:ietf:params:oauth:grant-type:token-exchange\n    • resource = a target RS URI\n    • requested_token_type = urn:ietf:params:oauth:token-type:jwt\n    • subject_token = token\n    • subject_token_type = urn:ietf:params:oauth:token-type:jwt
AS->AS:3. Authorization decision:\n    1. authenticate the client using the specified credentials\n    2. evaluate the resource parameter\n    3. verify the subject_token signature using the Client's certificate public key\n    4. validate the subject_token proof-of-possession\n    5. evaluate the subject_token claims\n    6. (optional) evaluate embedded tokens

AS->AS:4. AS STS generates a token — a signed certificate-bound assertion\n    in JWT format with these claims:\n    {iss, aud, sub, exp, nbf, cnf, act{sub}, tokens}\n    • iss is the URI that identifies who issues the token\n    • aud identifies the target service and it is the value from\n      the resource parameter\n    • sub identifies the user by email address\n      retrieved through subject_token introspection\n    • exp, nbf are the standard JWT claims\n    • cnf is the confirmation method with the hash of the client certificate\n      to which the token is bound\n    • act{sub} is the global client identifier in respect of the service it represents,\n      copied from the ASN1:UTF8String value of the certificate extension, e.g., client._mhs._grip.foo.com\n      (act identifies the acting party to whom authority has been delegated)\n    • tokens (optional) holds an embedded JWT from the previous hop
Client<-AS:5. Return the token\n{"access_token":token,\n "issued_token_type":"urn:ietf:params:oauth:token-type:jwt",\n "token_type":"N_A",\n "expires_in":3600}

Client->Client:6. Client generates a token — a signed, using the Client's private key,\n    DNS-bound assertion in JWT format with these claims:\n    {iss, aud, sub, exp, nbf, jwk, act{sub}, tokens}\n    • iss identifies who issues the token — CN from public Client's certificate,\n      e.g., foo.com\n    • aud identifies the target RS URI\n    • sub identifies the user by email address,\n      e.g. User Principal Name (UPN) from Active Directory (AD)\n      (Client impersonates the user by using their email address)\n    • exp, nbf are the standard JWT claims\n    • jwks holds a Client's certificate public key in the JWK Set format\n      (alternatively provide JWK Set by URI using jwks_uri claim)\n    • tokens holds an embedded JWT from the previous step\n      and optionally an embedded JWT from the previous hop\n    • fingerprint (optional) contains a fingerprint of the data being transmitted

Client->RS:7. Send an HTTP request to the RS with the token using mTLS
RS->RS:7. Authorization decision\n    1. the client is authenticated via the DNS using the TXT record and the custom OID value\n       from the public Client's certificate\n    2. verify token signature\n    3. validate proof-of-possession\n    4. evaluate embedded token from the AS\n    5. (optional) evaluate embedded tokens from the previous hops\n    6. the domain part of the user's email address and the domain part of the custom OID value\n       from the public Client's certificate must match
RS->Client:9. Return the HTTP response, typically with 200, 201 status code
